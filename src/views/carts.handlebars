<div class="cart-container">
  <h1>Carrito</h1>
  {{#if cart.products.length}}
    <ul class="cart-items">
      {{#each cart.products}}
        <li class="cart-item" data-product-id="{{this.product._id}}">
          <h3>{{this.product.title}}</h3>
          <p>Precio unitario: ${{this.product.price}}</p>
          <div class="quantity-control">
            <label>Cantidad:</label>
            <input type="number" value="{{this.quantity}}" min="1" onchange="updateQuantity('{{../cart._id}}', '{{this.product._id}}', this.value)">
          </div>
          <button class="btn-remove" onclick="removeProduct('{{../cart._id}}', '{{this.product._id}}')">
            Eliminar
          </button>
        </li>
      {{/each}}
    </ul>
    <button class="btn-clear" onclick="clearCart('{{cart._id}}')">
      Vaciar Carrito
    </button>
  {{else}}
    <p class="empty-cart">El carrito está vacío</p>
  {{/if}}
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  async function updateQuantity(cartId, productId, quantity) {
    try {
      const response = await fetch(`/api/carts/${cartId}/products/${productId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ quantity: Number(quantity) })
      });
      if (response.ok) {
        Swal.fire({
          icon: 'success',
          title: 'Cantidad actualizada',
          showConfirmButton: false,
          timer: 1200
        }).then(() => location.reload());
      } else {
        const data = await response.json();
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: data.message || 'No se pudo actualizar la cantidad'
        });
      }
    } catch (error) {
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: error.message || 'Ocurrió un error inesperado'
      });
    }
  }

  async function removeProduct(cartId, productId) {
    const result = await Swal.fire({
      title: '¿Eliminar este producto del carrito?',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Sí, eliminar',
      cancelButtonText: 'Cancelar'
    });
    if (result.isConfirmed) {
      const response = await fetch(`/api/carts/${cartId}/products/${productId}`, { method: 'DELETE' });
      if (response.ok) {
        Swal.fire({
          icon: 'success',
          title: 'Producto eliminado',
          showConfirmButton: false,
          timer: 1200
        }).then(() => location.reload());
      } else {
        const data = await response.json();
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: data.message || 'No se pudo eliminar el producto'
        });
      }
    }
  }

  async function clearCart(cartId) {
    const result = await Swal.fire({
      title: '¿Vaciar completamente el carrito?',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Sí, vaciar',
      cancelButtonText: 'Cancelar'
    });
    if (result.isConfirmed) {
      const response = await fetch(`/api/carts/${cartId}`, { method: 'DELETE' });
      if (response.ok) {
        Swal.fire({
          icon: 'success',
          title: 'Carrito vaciado',
          showConfirmButton: false,
          timer: 1200
        }).then(() => location.reload());
      } else {
        const data = await response.json();
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: data.message || 'No se pudo vaciar el carrito'
        });
      }
    }
  }
</script>